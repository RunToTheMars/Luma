name: CMake

on: 
  pull_request: 
    branches: 
      - master
    types: 
      - opened
      - synchronize
      - reopened
  push: 
    branches: 
      - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest
    container: ubuntu:latest

    steps:
    - uses: actions/checkout@v2
      
    - name: Install dependencies
      run: apt update && DEBIAN_FRONTEND=noninteractive apt install -y cmake gcc g++ libglu1-mesa-dev pkg-config libx11-dev libxext-dev

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        mkdir build_test
        mkdir from_installed
        mkdir pkg-config
        mkdir as_subdirectory

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: build_test
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build test
      working-directory: build_test
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Install test
      shell: bash
      working-directory: from_installed
      run: |
        mkdir -p ext_project/build
        cp $GITHUB_WORKSPACE/src/glewinfo.c ext_project/
        cmake $GITHUB_WORKSPACE -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/glew-root-cmake
        cmake --build . --target install
        
        cd ext_project
        cp $GITHUB_WORKSPACE/glew-cmake/cmake-install-test.cmake CMakeLists.txt
        cmake -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/glew-root-cmake/ .
        cmake --build .

    - name: Package config test
      shell: bash
      working-directory: pkg-config
      run: |
        mkdir -p ext_project
        cp $GITHUB_WORKSPACE/src/glewinfo.c ext_project/
        cmake $GITHUB_WORKSPACE -DPKG_CONFIG_REPRESENTATIVE_TARGET=libglew_static -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/glew-root-pkg-config
        cmake --build . --target install
        
        cd ext_project
        gcc $GITHUB_WORKSPACE/src/glewinfo.c $(PKG_CONFIG_PATH=$GITHUB_WORKSPACE/glew-root-pkg-config/lib/pkgconfig pkg-config --libs --cflags glew) -o glewinfo

    - name: Subdirectory test
      shell: bash
      working-directory: as_subdirectory
      run: |
        cp $GITHUB_WORKSPACE/src/glewinfo.c ./
        cp $GITHUB_WORKSPACE/glew-cmake/sub-directory-test.cmake CMakeLists.txt
        cmake .
        cmake --build .

  build_linux:
    strategy:
      fail-fast: false
      matrix:
        cmake:
          - 2.8.12.2
          - 3.10.3
          - latest
    runs-on: ubuntu-latest
    container: ubuntu:latest

    steps:
    - uses: actions/checkout@v2

    - name: Restore cached cmake
      uses: actions/cache/restore@v4
      with:
        path: /opt/cmake
        key: cmake-${{ matrix.cmake }}

    - name: Install dependencies
      shell: bash
      run: |
        cmake=${{ matrix.cmake }}
        apt update
        apt install -y gcc make libgl1-mesa-dev libx11-dev libxext-dev
        if [ "${cmake}" == "latest" ]; then
          apt install -y git
          cmake=$(git ls-remote --tags https://gitlab.kitware.com/cmake/cmake | cut -f 2 | sed -E "s/^refs\/tags\/v//" | tr -d "^{}" | sort -t '.' -k 1,1n -k 2,2n -k 3,3n | tail -n 1 | tr -d "\n")
          echo "Latest version: ${cmake}"
        fi
        if [ -x /opt/cmake/bin/cmake ]; then
          echo "Found cached cmake"
          if [ -n "$(/opt/cmake/bin/cmake --version | grep ${cmake})" ]; then
            exit 0
          fi
          /opt/cmake/bin/cmake --version
          echo "CMake version is mismatched"
          rm -rf /opt/cmake
        fi

        apt install -y g++ wget
        short_version=$(echo "${cmake}" | sed -E "s/^([0-9]+\\.[0-9]+)\\..+$/\\1/" | tr -d "\n")
        wget https://cmake.org/files/v${short_version}/cmake-${cmake}.tar.gz
        tar -xf cmake-${cmake}.tar.gz
        cd cmake-${cmake}
        if [ "${cmake}" == "2.8.12.2" ]; then
          apt -y install patch
          patch -p1 << 'EOF'
          --- cmake-2.8.12.2-org/CMakeLists.txt	2014-01-16 17:15:07.000000000 +0000
          +++ cmake-2.8.12.2-patch/CMakeLists.txt	2025-04-13 10:37:28.359021847 +0000
          @@ -616 +616 @@
          -add_subdirectory(Tests)
          +# add_subdirectory(Tests)
          --- cmake-2.8.12.2-org/Source/CMakeLists.txt	2014-01-16 17:15:08.000000000 +0000
          +++ cmake-2.8.12.2-patch/Source/CMakeLists.txt	2025-04-13 10:37:13.584956375 +0000
          @@ -481,2 +481,2 @@
          -add_library(CTestLib ${CTEST_SRCS})
          -target_link_libraries(CTestLib CMakeLib ${CMAKE_CURL_LIBRARIES} ${CMAKE_XMLRPC_LIBRARIES})
          +# add_library(CTestLib ${CTEST_SRCS})
          +# target_link_libraries(CTestLib CMakeLib ${CMAKE_CURL_LIBRARIES} ${CMAKE_XMLRPC_LIBRARIES})
          @@ -562,2 +562,2 @@
          -add_executable(ctest ctest.cxx)
          -target_link_libraries(ctest CTestLib)
          +# add_executable(ctest ctest.cxx)
          +# target_link_libraries(ctest CTestLib)
          @@ -583 +583 @@
          -install(TARGETS cmake ctest cpack DESTINATION bin)
          +install(TARGETS cmake cpack DESTINATION bin)
        EOF
        fi
        ./configure --prefix=/opt/cmake -- -DCMAKE_USE_OPENSSL=OFF
        make -j $(nproc) install

    - name: Save cmake
      uses: actions/cache/save@v4
      with:
        path: /opt/cmake
        key: cmake-${{ matrix.cmake }}

    - name: Configure CMake
      shell: bash
      run: /opt/cmake/bin/cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build test
      shell: bash
      run: /opt/cmake/bin/cmake --build .

    - name: Check alias
      shell: bash
      run: test -e lib/libGLEW.a

  build_mingw:
    runs-on: ubuntu-latest
    container: ubuntu:latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: apt update && apt install -y cmake g++-mingw-w64-x86-64 make libgl1-mesa-dev libx11-dev libxext-dev

    - name: Configure CMake
      shell: bash
      run: cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/glew-cmake/mingw.cmake"

    - name: Build test
      shell: bash
      run: cmake --build .


  build_mac:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      shell: bash
      run: cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build test
      shell: bash
      run: cmake --build .

  build_windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      shell: bash
      run: cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build test
      shell: bash
      run: cmake --build .
